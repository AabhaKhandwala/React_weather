{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","getTime","time","moment","utcOffset","timezone","format","setState","getWeather","zipInput","document","getElementById","value","console","log","process","fetch","then","response","status","json","data","zip","temperature","Math","round","main","temp","city","name","description","weather","icon","catch","err","class","id","type","placeholder","onClick","this","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0PA2HeA,G,wNApHbC,MAAQ,G,EACRC,QAAU,WAKR,IAAIC,EAAOC,MACRC,UAAU,EAAKJ,MAAMK,SAAW,IAChCC,OAAO,uBAEV,EAAKC,SAAS,CACZL,KAAMA,K,EAIVM,WAAa,WACX,IAAIC,EAAWC,SAASC,eAAe,WAAWC,MAClDC,QAAQC,IAAIL,GAEZI,QAAQC,IADKC,oCAGbC,MACE,qDACEP,EADF,6DAKCQ,MAAK,SAACC,GACmB,MAApBA,EAASC,OAMbD,EAASE,OAAOH,MAAK,SAACI,GACpBR,QAAQC,IAAIO,GACZ,EAAKd,SAAS,CACZe,IAAKD,EAAKZ,SACVc,YAAaC,KAAKC,MAAMJ,EAAKK,KAAKC,MAAQ,QAC1CC,KAAMP,EAAKQ,KACXxB,SAAUgB,EAAKhB,SACfyB,YAAaT,EAAKU,QAAQ,GAAGD,YAC7BE,KAAMX,EAAKU,QAAQ,GAAGC,OAExB,EAAK/B,aAfLY,QAAQC,IACN,gDAAkDI,EAASC,WAiBhEc,OAAM,SAACC,GACNrB,QAAQC,IAAI,kBAAmBoB,O,uDAKnC,OACE,oCACE,yBAAKC,MAAM,aACT,2CAEA,yBAAKC,GAAG,UACN,2BACEC,KAAK,OACLC,YAAY,qBACZF,GAAG,YAEL,4BAAQA,GAAG,MAAMG,QAASC,KAAKhC,YAA/B,QAKF,yBAAK4B,GAAG,QACN,6BAASD,MAAM,YACb,yBAAKC,GAAG,QAAQI,KAAKxC,MAAM4B,MAC3B,yBAAKO,MAAM,QAAQK,KAAKxC,MAAME,OAEhC,yBAAKiC,MAAM,WACT,yBAAKC,GAAG,QACLI,KAAKxC,MAAMuB,YACZ,gCAEF,yBAAKa,GAAG,QAAQI,KAAKxC,MAAM8B,aAC3B,yBACEW,IAAG,0CAAqCD,KAAKxC,MAAMgC,KAAhD,QACHU,IAAI,a,GAnFFC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAASC,eAAe,SDyHpB,kBAAmByC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.777a2d5c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport \"moment-timezone\";\n//import tz from \"zipcode-to-timezone\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {};\n  getTime = () => {\n    //const zone = tz.lookup(this.state.zip);\n    //const zone = timezone.lookup(this.state.zip);\n    //const zone = this.state.timezone / 60;\n    //console.log(zone);\n    let time = moment()\n      .utcOffset(this.state.timezone / 60)\n      .format(\"YYYY-MM-DD hh:mm a \");\n\n    this.setState({\n      time: time,\n    });\n  };\n\n  getWeather = () => {\n    let zipInput = document.getElementById(\"zipcode\").value;\n    console.log(zipInput);\n    let apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n    console.log(apiKey);\n\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=` +\n        zipInput +\n        `,US&units=imperial&appid=` +\n        process.env.REACT_APP_WEATHER_API_KEY\n    )\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(\n            \"Looks like there was a problem. Status Code: \" + response.status\n          );\n          return;\n        }\n        response.json().then((data) => {\n          console.log(data);\n          this.setState({\n            zip: data.zipInput,\n            temperature: Math.round(data.main.temp) + \"Â°F\",\n            city: data.name,\n            timezone: data.timezone,\n            description: data.weather[0].description,\n            icon: data.weather[0].icon,\n          });\n          this.getTime();\n        });\n      })\n      .catch((err) => {\n        console.log(\"Fetch Error :-S\", err);\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <div class=\"container\">\n          <h2>WEATHER APP</h2>\n\n          <div id=\"header\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter ZipCode Here\"\n              id=\"zipcode\"\n            ></input>\n            <button id=\"btn\" onClick={this.getWeather}>\n              Go!\n            </button>\n          </div>\n\n          <div id=\"main\">\n            <section class=\"location\">\n              <div id=\"city\">{this.state.city}</div>\n              <div class=\"time\">{this.state.time}</div>\n            </section>\n            <div class=\"current\">\n              <div id=\"temp\">\n                {this.state.temperature}\n                <span></span>\n              </div>\n              <div id=\"desc\">{this.state.description}</div>\n              <img\n                src={`http://openweathermap.org/img/w/${this.state.icon}.png`}\n                alt=\"\"\n              ></img>\n            </div>\n          </div>\n        </div>\n      </>\n      //   <div  class=\"container\">\n      //   <h2>WEATHER APP</h2>\n      //  <!-- container for Moment.js output -->\n      //     <!----- <div id=\"displayMoment\"></div>-->\n      //  <header>\n      //      <input id=\"zipinpt\" type=\"text\" placeholder=\"Enter ZipCode\"></INput>\n      //      <button id=\"btn\" >Go!</button>\n      //  </header>\n      //  <main>\n      //      <section class=\"location\">\n      //          <div id=\"city\"></div>\n      //          <div class=\"time\"></div>\n      //      </section>\n      //      <div class=current>\n      //          <div id=\"temp\"><span></span></div>\n      //          <div id=\"desc\"></div>\n      //          <div id=\"hi-low\"></div>\n      //          <div id=\"icon\">\n\n      //          </div>\n\n      //      </div>\n      //  </main>\n      //</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}